datasource db {
  provider = "postgresql"
  url      = env("NEON_CONNECTION_URI")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  first_name    String?
  last_name     String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdDate DateTime @default(now())
  membership String   @default("free")
  isAdmin  Boolean @default(false)
  accountType          String?  // Add this line for user type
  canHaveMultipleChannels Boolean @default(false) // Indicates if a user can have multiple channels
  channel        Channel[] // Add one-to-one relationship with channel
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Channel {
  id                Int       @id @default(autoincrement())
  name              String
  username          String    @unique
  youtube_id        String    @unique
  description       String
  date_joined       DateTime? @default(now()) @db.Timestamptz(6)
  profile_image_src String
  banner_image_src  String
  categories        String[]
  videos            Video[]
  cover_image_src   String @default("") // Ensure the default value is set in the schema as well
  featured          Boolean @default(false)
  comingSoon        Boolean @default(false)
  userId            String?  // Link to User
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model Video {
  id               Int     @id @default(autoincrement())
  channel          Channel @relation(fields: [channel_id], references: [id])
  channel_id       Int
  title            String
  description      String
  thumbnail        String
  youtube_video_id String
  published_at     String
}
